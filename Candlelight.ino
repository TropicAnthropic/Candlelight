// Candlelight
// Version 1.00
// April 30th 24 - May 10th 24
// Matthew Bryan

#include <Arduboy2.h>
#include <ArduboyTones.h>
Arduboy2Base arduboy;
Sprites sprites;
ArduboyTones sound(arduboy.audio.enabled);

// Bitmaps

const uint8_t PROGMEM Onebit[] = {
26, 8,
0x7e, 0x81, 0x81, 0x81, 0x7e, 0x00, 0xf8, 0x10, 0x08, 0xf0, 0x00, 0xf0, 0x98, 0x98, 0x98, 0x00, 0xff, 0x88, 0x88, 0xf0, 0x00, 0xfa, 0x00, 0x08, 0xfc, 0x08, 
};

const uint8_t PROGMEM Productions[] = {
51, 8,
0xff, 0x11, 0x11, 0x11, 0x0e, 0x00, 0xf8, 0x10, 0x08, 0x10, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0xf0, 0x88, 0x88, 0xff, 0x00, 0x78, 0x80, 0x80, 0xf8, 0x00, 0x70, 0x88, 0x88, 0x50, 0x00, 0x08, 0xfc, 0x08, 0x00, 0xfa, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0xf8, 0x10, 0x08, 0xf0, 0x00, 0x90, 0xa8, 0xa8, 0x48, 
};

const uint8_t PROGMEM Presents[] = {
39, 8,
0xff, 0x11, 0x11, 0x11, 0x0e, 0x00, 0xf8, 0x10, 0x08, 0x10, 0x00, 0xf0, 0x98, 0x98, 0x98, 0x00, 0x90, 0xa8, 0xa8, 0x48, 0x00, 0xf0, 0x98, 0x98, 0x98, 0x00, 0xf8, 0x10, 0x08, 0xf0, 0x00, 0x08, 0xfc, 0x08, 0x00, 0x90, 0xa8, 0xa8, 0x48, 
};

const uint8_t PROGMEM Candlelight[] = {
121, 19,
0x50, 0xa4, 0xfa, 0xfc, 0x1f, 0x05, 0x06, 0x06, 0x05, 0x0e, 0x1d, 0x1a, 0x0c, 0x08, 0x00, 0x80, 0xa0, 0xd0, 0xe0, 0x50, 0x60, 0x50, 0xe0, 0xd0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x50, 0xa0, 0xe0, 0xd0, 0x60, 0x50, 0xe0, 0xd0, 0x60, 0xc0, 0x00, 0x00, 0x80, 0xe0, 0xd0, 0xe0, 0x50, 0x60, 0x60, 0xfd, 0xfa, 0xfd, 0xfa, 0x00, 0x00, 0x00, 0xfd, 0xfa, 0xed, 0xfe, 0x00, 0x00, 0x80, 0xc0, 0xa0, 0xd0, 0x60, 0x50, 0x60, 0x60, 0xd0, 0xe0, 0x40, 0x80, 0x00, 0x00, 0xfe, 0xfb, 0xfe, 0x55, 0x00, 0x00, 0x00, 0xf7, 0xd6, 0xf5, 0x52, 0x00, 0x00, 0xc0, 0x60, 0xd0, 0xe0, 0x70, 0x50, 0xe0, 0xd0, 0xe0, 0xa0, 0xb0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0xf5, 0xfe, 0x60, 0x70, 0xc0, 0xe0, 0xa0, 0x40, 0x00, 0x00, 0x70, 0xf4, 0xfe, 0xfa, 0xad, 0x70, 0x50, 
0x05, 0x1e, 0x37, 0x3f, 0x78, 0x70, 0x70, 0x70, 0x70, 0x7c, 0x7e, 0x3e, 0x1c, 0x0c, 0x00, 0x00, 0x38, 0x7c, 0x7e, 0x76, 0x72, 0x33, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x55, 0x7e, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x0a, 0x3f, 0x7f, 0x7f, 0x60, 0x70, 0x30, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x0f, 0x1e, 0x3f, 0x7f, 0x7b, 0x73, 0x73, 0x73, 0x7b, 0x3b, 0x1b, 0x0a, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x69, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x6d, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0x7b, 0x70, 0x70, 0x30, 0xff, 0xff, 0xed, 0x5a, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7a, 0x00, 0x00, 0x7f, 0x7f, 0x6a, 0x55, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0x7d, 0x7a, 0x60, 0x70, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x06, 0x07, 0x07, 0x06, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM startGame[] = {
114, 15,
0x3c, 0x7e, 0xfe, 0xff, 0xe7, 0xe7, 0xc7, 0xcf, 0xdf, 0x9e, 0x9c, 0x18, 0x00, 0x70, 0xfc, 0xfe, 0xfe, 0xff, 0x70, 0x70, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0x70, 0x70, 0x30, 0x00, 0x70, 0xfc, 0xfe, 0xfe, 0xff, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfc, 0xfe, 0xfe, 0x1f, 0x0f, 0x07, 0x07, 0x87, 0x87, 0x8f, 0x9f, 0x9e, 0x9c, 0x88, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x60, 0x70, 0xf0, 0xf0, 0xf0, 0xe0, 0x60, 0x70, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xe0, 0xc0, 0x80, 
0x0c, 0x1c, 0x3c, 0x7c, 0x79, 0x71, 0x71, 0x73, 0x7f, 0x3f, 0x3f, 0x0f, 0x00, 0x00, 0x3f, 0x7f, 0x7f, 0x7f, 0x70, 0x70, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x7e, 0x76, 0x72, 0x33, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7f, 0x7f, 0x7f, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x7c, 0x78, 0x70, 0x70, 0x73, 0x73, 0x7b, 0x7f, 0x3f, 0x3f, 0x1f, 0x00, 0x18, 0x3c, 0x7e, 0x7e, 0x76, 0x72, 0x33, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x7f, 0x7b, 0x73, 0x73, 0x73, 0x7b, 0x3b, 0x1b, 0x0b, 
};

const uint8_t PROGMEM speaker1[] = {
32, 13,
0x40, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0x40, 
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
};

const uint8_t PROGMEM sound1[] = {
7, 13,
0xf0, 0x00, 0x04, 0xf8, 0x01, 0x02, 0xfc, 
0x01, 0x00, 0x04, 0x03, 0x10, 0x08, 0x07, 
};

const uint8_t PROGMEM gameOverScreen[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x78, 0xf0, 0xe0, 0x80, 0xe0, 0xf0, 0x78, 0x18, 0x08, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x40, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x40, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x3f, 0x3f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x30, 0x30, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 0x1f, 0x3f, 0x3f, 0x30, 0x10, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x19, 0x3d, 0x3d, 0x36, 0x16, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x38, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x36, 0x36, 0x37, 0x37, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x10, 0x30, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x36, 0x36, 0x37, 0x37, 0x17, 0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x36, 0x36, 0x37, 0x37, 0x17, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0x20, 0x20, 0x60, 0x40, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x40, 0x60, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x60, 0xf8, 0xfc, 0xfc, 0x6c, 0x0c, 0x60, 0xf8, 0xfc, 0xfc, 0x6c, 0x0c, 0x00, 0x80, 0xc0, 0xe0, 0x60, 0x60, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x60, 0x40, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x60, 0x60, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x60, 0xf8, 0xf8, 0xfc, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1b, 0x13, 0x13, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x18, 0x08, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x1b, 0x1b, 0x1b, 0x1b, 0x0b, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x18, 0x08, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x18, 0x18, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x18, 0x08, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0xa0, 0x00, 0x80, 0x80, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x32, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xd0, 0xa8, 0x88, 0x54, 0x04, 0x44, 0x00, 0x3f, 0x00, 0x44, 0x04, 0x54, 0x88, 0xa8, 0xd0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xab, 0x55, 0xab, 0x01, 0xab, 0x55, 0xab, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM win1[] = {
128, 64,
0xff, 0xff, 0xff, 0xff, 0xe7, 0x07, 0x07, 0x1f, 0xff, 0x1f, 0x07, 0x07, 0xe7, 0x27, 0x27, 0x27, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x0f, 0x0f, 0x07, 0x3f, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x7f, 0x3f, 0xbf, 0xbf, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xbf, 0xff, 0xff, 0xff, 0xff, 0x27, 0x27, 0x27, 0xff, 0x7f, 0x3f, 0x3f, 0xbf, 0xbf, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xbf, 0xff, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0xff, 0x3f, 0x3f, 0x3f, 0x7f, 0x3f, 0xbf, 0x7f, 0x3f, 0x3f, 0xbf, 0xbf, 0x3f, 0x7f, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0xe3, 0xe0, 0xf8, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xf8, 0xf0, 0xe0, 0xe7, 0xe7, 0xe2, 0xf2, 0xfa, 0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xe7, 0xe7, 0xf8, 0xf0, 0xe0, 0xe7, 0xe7, 0xe0, 0xf0, 0xf8, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x30, 0x00, 0x07, 0x80, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xf6, 0xe4, 0xec, 0xe8, 0xe1, 0xe1, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x30, 0x00, 0x07, 0x80, 0xf0, 0xfc, 0xff, 0xf8, 0xf0, 0xe0, 0xe7, 0xe7, 0xe0, 0xf0, 0xf8, 0xff, 0xf0, 0xe0, 0xe0, 0xe7, 0xf7, 0xe0, 0xe0, 0xe0, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xf6, 0xe4, 0xec, 0xe8, 0xe1, 0xe1, 0xf3, 0xff, 0xe2, 0xe2, 0xe2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x0f, 0x07, 0x07, 0x03, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xbf, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0x1f, 0x5f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM player0[] = {
5, 5,
0x0e, 0x1f, 0x1f, 0x1f, 0x0e, 
};
const uint8_t PROGMEM player0mask[] = {
0x0e, 0x1f, 0x1f, 0x1f, 0x0e, 
};

const uint8_t PROGMEM flame1[] = {
3, 3,
0x02, 0x07, 0x02, 
};
const uint8_t PROGMEM flame1mask[] = {
0x02, 0x07, 0x02, 
};

const uint8_t PROGMEM flame2[] = {
2, 2,
0x03, 0x03, 
};
const uint8_t PROGMEM flame2mask[] = {
0x03, 0x03, 
};

const uint8_t PROGMEM block2[] = {
8, 8,
0xbd, 0x42, 0xa5, 0x99, 0x99, 0xa5, 0x42, 0xbd, 
};
const uint8_t PROGMEM block3[] = {
8, 8,
0x7e, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xbd, 0x7e, 
};
const uint8_t PROGMEM block4[] = {
8, 8,
0x77, 0x77, 0x77, 0x70, 0x77, 0x77, 0x77, 0x07, 
};
const uint8_t PROGMEM block5[] = {
8, 8,
0xff, 0x81, 0xa5, 0x81, 0x81, 0xa5, 0x81, 0xff, 
};

const uint8_t PROGMEM wood1[] = {
8, 8,
0xdd, 0x5d, 0xf5, 0x77, 0xd7, 0x5d, 0xf5, 0x55, 
};
const uint8_t PROGMEM wood2[] = {
8, 8,
0x99, 0x54, 0x35, 0x63, 0x96, 0x4d, 0xa4, 0x55, 
};
const uint8_t PROGMEM wood3[] = {
8, 8,
0x09, 0x40, 0x20, 0x62, 0x02, 0x49, 0x80, 0x51, 
};

const uint8_t PROGMEM blockMask[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM water1[] = {
8, 8,
0x84, 0x82, 0xa1, 0x82, 0x84, 0x88, 0x88, 0x84, 
};
const uint8_t PROGMEM water2[] = {
8, 8,
0x84, 0x82, 0x8a, 0x82, 0x84, 0x84, 0xa4, 0x84, 
};
const uint8_t PROGMEM water3[] = {
8, 8,
0x84, 0x84, 0x84, 0x84, 0x82, 0x82, 0x92, 0x84, 
};
const uint8_t PROGMEM water4[] = {
8, 8,
0x84, 0x88, 0x88, 0x84, 0x82, 0x81, 0x82, 0x84, 
};
const uint8_t PROGMEM water5[] = {
8, 8,
0x84, 0x84, 0x84, 0x84, 0x92, 0x82, 0x82, 0x84, 
};
const uint8_t PROGMEM water6[] = {
8, 8,
0x84, 0xc4, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 
};

const uint8_t PROGMEM tap1[] = {
8, 12,
0x7e, 0xff, 0xd3, 0xff, 0xff, 0xd3, 0xff, 0x7e, 
0x03, 0x05, 0x08, 0x08, 0x08, 0x08, 0x05, 0x03, 
};
const uint8_t PROGMEM tap1mask[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 
};

const uint8_t PROGMEM drip1[] = {
7, 8,
0x30, 0x4c, 0x92, 0x81, 0x82, 0x4c, 0x30, 
};
const uint8_t PROGMEM drip1mask[] = {
0x30, 0x4c, 0x92, 0x81, 0x82, 0x4c, 0x30, 
};
const uint8_t PROGMEM drip2[] = {
7, 8,
0x00, 0x30, 0x4c, 0x93, 0x4c, 0x30, 0x00, 
};
const uint8_t PROGMEM drip2mask[] = {
0x00, 0x30, 0x4c, 0x93, 0x4c, 0x30, 0x00, 
};

const uint8_t PROGMEM mask0mask[] = {
64,64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM light1[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};
const uint8_t PROGMEM light2[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};
const uint8_t PROGMEM light3[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM candle[] = {
8, 24,
0xf0, 0x28, 0xc0, 0x41, 0x4e, 0xc0, 0x28, 0xf0, 
0xff, 0x00, 0xaa, 0x00, 0x00, 0xff, 0x00, 0xff, 
0x7f, 0x80, 0xaa, 0x80, 0x80, 0xff, 0x80, 0x7f, 
};

const uint8_t PROGMEM furnace1[] = {
8, 16,
0xfe, 0x03, 0xbd, 0x25, 0x25, 0xbd, 0x03, 0xfe, 
0x7f, 0x83, 0x81, 0x81, 0x81, 0x81, 0x83, 0x7f, 
};

const uint8_t PROGMEM fFlame1[] = {
8, 8,
0x7e, 0x83, 0xc1, 0xa9, 0xd1, 0xc1, 0x83, 0x7e, 
};
const uint8_t PROGMEM fFlame2[] = {
8, 8,
0x7e, 0x83, 0xd9, 0xfb, 0xb5, 0x81, 0x83, 0x7e, 
};
const uint8_t PROGMEM fFlame3[] = {
8, 8,
0x7e, 0x83, 0x81, 0x91, 0xf1, 0xe9, 0x83, 0x7e, 
};
const uint8_t PROGMEM fFlame4[] = {
8, 8,
0x7e, 0x83, 0x81, 0x9d, 0x8f, 0x81, 0x83, 0x7e, 
};

const uint8_t PROGMEM life1[] = {
17, 31,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x3f, 0x3f, 0xbf, 0x3f, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0x68, 0xd4, 0xc4, 0xaa, 0x82, 0xa2, 0x80, 0x9f, 0x80, 0xa2, 0x82, 0xaa, 0xc4, 0xd4, 0x68, 0xf0, 
0x7f, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x2a, 0x55, 0x00, 0x55, 0x2a, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 
};

// Array Data

const uint8_t PROGMEM level1[] =
{
  1,4,
  1,1,1,1,1,1,
  1,0,0,0,0,0,
  0,0,0,1,1,1,
  0,0,0,0,0,0,
  1,0,0,0,0,1,
  1,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  0,0,0,0,0,0,
  0,0,1,0,0,0,
  0,0,1,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level2[] PROGMEM = // Level: X+1,Y+1, (level date can exclude border)
{
  2,4,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,1,1,
  0,0,0,0,1,1,
  0,0,0,0,0,0,
  0,0,1,1,1,1,
  0,0,1,1,1,1,
  0,0,0,6,0,0,
  0,0,0,6,0,0,
  0,0,0,6,0,0,
  0,0,0,6,0,0,
  0,0,0,6,0,0,
  0,0,0,6,0,0,
};

const uint8_t level3[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  3,4,
  0,0,0,0,0,0,
  0,0,0,0,1,0,
  0,0,0,0,0,0,
  0,1,0,0,0,0,
  0,10,0,0,0,0,
  0,1,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,1,1,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,1,1,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level4[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  4,4,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,1,0,
  0,0,1,1,1,0,
  0,0,1,1,1,0,
  0,0,1,1,1,0,
  0,0,1,1,1,0,
  0,0,1,1,1,0,
};

const uint8_t level5[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  5,2,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  10,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,1,1,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,1,0,
  0,0,0,0,1,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level6[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  6,3,
  0,0,0,1,1,1,
  0,0,0,1,1,1,
  0,0,0,1,1,1,
  0,0,0,1,1,1,
  0,0,0,1,1,1,
  0,0,0,9,1,1,
  0,0,0,9,1,1,
  0,0,0,9,1,1,
  0,0,0,9,1,1,
  0,0,0,1,1,1,
  0,0,1,1,1,1,
  0,1,1,1,1,1,
  0,0,0,0,0,0,
  0,0,1,0,0,0,
};

const uint8_t level7[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  7,3,
  0,0,0,0,0,6,
  0,0,0,0,0,6,
  0,0,0,0,0,6,
  0,0,6,6,6,6,
  0,0,6,0,0,6,
  0,0,6,0,0,6,
  0,0,6,0,0,6,
  6,6,6,0,0,6,
  0,0,0,0,0,6,
  0,0,0,6,0,6,
  0,0,0,6,0,6,
  0,6,0,0,0,6,
  0,6,0,0,0,6,
  0,6,0,0,0,6,
};

const uint8_t level8[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  8,3,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,1,1,0,
  10,0,0,0,0,0,
  1,1,1,1,1,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,1,1,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,1,1,0,
  10,0,0,0,0,0,
  1,1,1,1,1,0,
  1,1,1,1,1,0,
};

const uint8_t level9[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  9,3,
  0,0,0,0,1,0,
  0,0,1,0,1,0,
  0,0,6,0,6,0,
  0,0,6,0,6,0,
  0,0,6,0,6,0,
  0,0,6,0,6,0,
  0,0,1,0,1,0,
  0,0,1,0,0,0,
  0,0,1,0,0,0,
  0,0,1,1,1,1,
  0,0,9,1,0,0,
  0,0,1,1,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level10[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  10,3,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,1,1,1,1,1,
  0,1,1,0,0,0,
  0,1,10,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,1,1,1,
  1,1,1,1,1,1,
};

const uint8_t level11[] PROGMEM = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  11,4,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,1,1,1,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,1,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level12[] = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  12,5,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,1,1,
  0,0,0,0,1,1,
  0,0,0,0,9,1,
  0,0,0,0,9,1,
  0,0,0,0,1,1,
  0,0,1,1,1,1,
  0,0,1,1,1,1,
  0,0,1,1,1,1,
  0,0,1,1,1,1,
};

const uint8_t level13[] = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  13,5,
  0,0,0,0,6,0,
  0,0,0,0,6,0,
  0,0,6,0,0,0,
  0,0,6,0,0,0,
  0,0,0,0,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  0,0,0,1,0,0,
  1,1,1,1,0,0,
  0,0,6,6,6,6,
  0,0,6,7,6,6,
  0,0,6,6,8,6,
  0,0,6,6,6,6,
  0,0,0,0,0,0,
};

const uint8_t level14[] = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  14,5,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,1,1,
  0,0,1,1,1,1,
  0,0,1,1,0,0,
  0,0,9,1,0,0,
  0,0,9,1,0,0,
  0,0,9,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

const uint8_t level16[] = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  16,2,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,9,1,0,0,
  0,0,9,1,0,0,
  0,0,9,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,0,0,
  0,0,1,1,1,1,
  0,0,0,0,0,9,
  0,0,1,0,0,9,
  0,0,1,0,0,9,
};

const uint8_t level17[] = // Level: level Number, X+1,Y+1, (level date can exclude border)
{
  17,4,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  10,0,0,0,0,0,
  0,0,0,0,0,0,
  1,1,6,6,1,1,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,1,0,0,0,0,
  0,1,0,0,0,0,
  0,0,1,0,0,0,
  0,0,0,1,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
};

// Music

const uint16_t startTune[] PROGMEM = {
  800, 30,  750,30, 775,30, 800, 30,  750,30, 775,30, 750,30, 775,30, 800,30,
  TONES_END
};

const uint16_t snuffTune[] PROGMEM = {
  150, 10,  200,20, 150,10,
  TONES_END
};

const uint16_t doorTune[] PROGMEM = {
  500, 100,  400,100, 300,100, 500,100,  600,100,
  TONES_END
};

const uint16_t landTune[] PROGMEM = {
  200, 30,  250,30,
  TONES_END
};

const uint16_t jumpTune[] PROGMEM = {
  650,20,  700,20, 750,20,
  TONES_END
};

const uint16_t dashTune[] PROGMEM = {
  800,30,  900,30, 1000,30,
  TONES_END
};

const uint16_t fireTune[] PROGMEM = {
  200,300,  300,300, 200,300,
  TONES_END
};

// Variables

// general variables
bool firstRun = 1;
bool start = 0;
bool s = 1;  // Sound on or off
int i;
int c;
int direction = 1;
int r;
int gameProgress = 0;
int anim2;
int anim3;
int anim4;
int anim6;
int anim33;
int levelDelay;
double gravity = 0.37;
uint8_t levelRead;
int level;
int newLevel;
int newX;
int newY;
bool furnaceLit1;
bool furnaceLit2;
bool furnaceLit3;
int winDelay;

// player Variables
int playerX = 0;
int playerY = 0;
int playerXvel; // velocity
double playerYvel;
uint8_t playerJump; // Jump timer
uint8_t playerDash;
bool jumpPressed;
bool dashPressed;
uint8_t touchdown;
uint8_t playerDeath; // death timer
int playerXsimp; // simplified grid
int playerYsimp;
bool headBump;
bool leftWall;
bool rightWall;
bool land = 1;
int fall;
uint8_t moveRight;
uint8_t moveLeft;
uint8_t yHeight = 5;
uint8_t lives = 3;

// Screen Variables
uint8_t screen[16][8]; // bigger than nessesairy?
uint8_t x = 0;
uint8_t y = 0;
int xOffset = 0;
int yOffset = 0;
int windowXmin;
int windowXmax;
int windowYmin;
int windowYmax;
int blockType;

// Flame Variables
uint8_t flameNumber = 10;
uint8_t flameLife[11];
double flameX[11];
double flameY[11];

// Cinder Variables
uint8_t cinderNumber = 30;
uint8_t cinderLife[31];
int cinderX[31];
int cinderY[31];

// Drip Variables
uint8_t dripNumber = 4;
uint8_t dripLife[5];
int dripX[5];
int dripY[5];

void setup()
{
  arduboy.begin();
  arduboy.setFrameRate(50);
  arduboy.display();
  for (int i = 1; i < 2000; i++)  // Random dissolve for ARDUBOY title
  {
    x = rand() % 89 + 1;
    y = rand() % 17 + 1;
    arduboy.drawPixel(x + 18, y + 22, 0);
    arduboy.display();
  }
}

void loop()
{
  if (!(arduboy.nextFrame()))
  return;
  arduboy.clear();

  if (!start)
  {
    // Intro
    if (firstRun == true)
    {

      //arduboy.clear();
      //arduboy.display(); // working ????
      // Logo

      playerY = -10;
      for (i = 0; 30 > i; i++)
      {
        arduboy.clear();
        Sprites::drawOverwrite(20, playerY, Onebit, 0);
        playerY++;
        arduboy.display();
      }

      playerX = 128;
      for (i = 0; 79 > i; i++)
      {
        arduboy.clear();
        Sprites::drawOverwrite(20, 20, Onebit, 0);
        Sprites::drawOverwrite(playerX, 20, Productions, 0);
        playerX--;
        arduboy.display();
      }

      playerY = 65;
      for (i = 0; 36 > i; i++)
      {
        arduboy.clear();
        Sprites::drawOverwrite(20, 20, Onebit, 0);
        Sprites::drawOverwrite(49, 20, Productions, 0);
        Sprites::drawOverwrite(49, playerY, Presents, 0);
        playerY--;
        arduboy.display();
      }

      arduboy.delayShort(1500);
      playerX = 0;

      // Intro Screen
        arduboy.clear();
        Sprites::drawOverwrite(0, 0, Candlelight, 0);
        Sprites::drawOverwrite(31, 31, life1, 0);
        arduboy.display();
        arduboy.delayShort(2500);
    }///////////////////////////////////////////////////////////////////////////////////////////////////

    // Game Title screen loop in here
    firstRun = 0;

    arduboy.clear();
    //////////////////////////////////////

    if (direction == 1)
    {
      playerX++;
    }
    if (direction == 2)
    {
      playerX--;
    }

    if (playerX > 128)
    {
      direction = 2;
    }
    if (playerX < -114)
    {
      direction = 1;
    }

    Sprites::drawOverwrite(playerX, 43, startGame, 0);

    Sprites::drawOverwrite(89, 9, speaker1, 0);

    if (s == 1)
    {
      Sprites::drawOverwrite(108, 9, sound1, 0);
    }

    arduboy.display();

    if (arduboy.pressed(A_BUTTON))
    {
      start = 1;
      newGame();
    }

    if (arduboy.pressed(B_BUTTON))
    {
      start = 1;
      newGame();
    }

    if (arduboy.pressed(RIGHT_BUTTON))
    {
      s = 1;
    }

    if (arduboy.pressed(LEFT_BUTTON))
    {
      s = 0;
    }
  }

  // Main Game LOOP ###############################################
  if (start == 1)
  {
    animations();
    gameUnfold();
    draw();
  }
  // End of Main Game LOOP ########################################
}

// Subroutines

void animations()
{
  if (levelDelay > 0)
  {
    levelDelay--;
  }

  anim2++;
  if (anim2 == 3)
  {
    anim2 = 2;
  }

  if (anim2 == 2)
  {
    anim3++;
    if (anim3 == 4)
    {
      anim3 = 1;
    }
  }

  if (anim3 == 3)
  {
    anim6++;
    if (anim6 == 7)
    {
      anim6 = 1;
    }
  }

  if (anim2 == 2)
  {
    anim4++;
    if (anim4 == 5)
    {
      anim4 = 1;
    }
  }

  anim33++;
  if (anim33 == 34)
  {
    anim33 = 1;
  }

  if (playerJump > 0)
  {
    playerJump--;
  }

  if (playerDash > 0)
  {
    playerDash--;
  }

  if (moveRight > 0)
  {
    moveRight--;
  }
  if (moveLeft > 0)
  {
    moveLeft--;
  }
}

void newGame()
{
  playerX = 25;
  playerY = 27;
  direction = 1;
  if (s == 1)
  {
    sound.tones(startTune);
  }
  arduboy.delayShort(1000);
  livesScreen();
  levelOne();
}

void levelOne() // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
{
  level = pgm_read_byte(&level1[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level1[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level1[levelRead]);
      levelRead++;
    }
  }

  levelBorder();

  // place doors
  screen[15][6] = 0;
}

void levelTwo()
{
  level = pgm_read_byte(&level2[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level2[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level2[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();
  // place doors
  screen[0][6] = 0;
  screen[15][3] = 0;
}

void levelThree()
{
  level = pgm_read_byte(&level3[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level3[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level3[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[5][7] = 9;
  screen[6][7] = 9;

  // place doors
  screen[0][3] = 0;
  screen[14][7] = 0;
}

void levelFour()
{
  level = pgm_read_byte(&level4[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level4[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level4[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[11][7] = 9;
  screen[12][7] = 9;

  // place doors
  screen[14][0] = 0;
  screen[0][2] = 0;
  screen[1][7] = 0;
  screen[15][6] = 0;
}

void levelFive()
{
  level = pgm_read_byte(&level5[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level5[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level5[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[3][7] = 9;

  // place doors
  screen[0][2] = 0;
  screen[15][2] = 0;
}

void levelSix()
{
  level = pgm_read_byte(&level6[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level6[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level6[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place doors
  screen[1][0] = 0;
  screen[15][5] = 0;
}

void levelSeven()
{
  level = pgm_read_byte(&level7[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level7[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level7[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  for (i = 1 ; 15 > i; i++)
  {
    screen[i][7] = 9;
  }

  // place doors
  screen[0][5] = 0;
  screen[15][1] = 0;
}

void levelEaight()
{
  level = pgm_read_byte(&level8[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level8[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level8[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[4][7] = 9;
  screen[12][7] = 9;
  // place doors
  screen[0][1] = 0;
  screen[15][6] = 0;
}

void levelNine()
{
  level = pgm_read_byte(&level9[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level9[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level9[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place doors
  screen[0][6] = 0;
  screen[11][7] = 0;
}

void levelTen()
{
  level = pgm_read_byte(&level10[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level10[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level10[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[4][7] = 9;
  screen[5][7] = 9;

  // place doors
  screen[12][0] = 0;
  screen[2][7] = 0;
}

void levelEleven()
{
  level = pgm_read_byte(&level11[levelRead]);
  levelRead++;
  blockType = pgm_read_byte(&level11[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = pgm_read_byte(&level11[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place door
  screen[2][0] = 0;
}

void levelTwelve()
{
  level = (level12[levelRead]);
  levelRead++;
  blockType = (level12[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = (level12[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // taps
  screen[3][0] = 10;
  screen[8][0] = 10;

  // place any water in floor
  screen[3][7] = 9;
  screen[4][7] = 9;

  // place doors
  screen[0][6] = 0;
  screen[14][0] = 0;
}

void levelThirteen()
{
  level = (level13[levelRead]);
  levelRead++;
  blockType = (level13[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = (level13[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place doors
  screen[14][7] = 0;
  screen[7][0] = 0;
}

void levelFourteen()
{
  level = (level14[levelRead]);
  levelRead++;
  blockType = (level14[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = (level14[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place doors 20
  screen[7][7] = 0;
}

void levelSixteen()
{
  level = (level16[levelRead]);
  levelRead++;
  blockType = (level16[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = (level16[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place doors
  screen[15][2] = 0;
  screen[9][7] = 0;
}

void levelSeventeen()
{
  level = (level17[levelRead]);
  levelRead++;
  blockType = (level17[levelRead]);
  levelRead++;

  for (x = 1; 16-1 > x; x++) // populate level (excluding border)
  {
    for (y = 1; 8-1 > y; y++)
    {
      screen[x][y] = (level17[levelRead]);
      levelRead++;
    }
  } 
  levelBorder();

  // place any water in floor
  screen[4][7] = 9;

  // place doors
  screen[9][0] = 0;
  screen[17][3] = 0;
}

// LLLLLLLLLLLLLLLLLLLLLLLL

void levelBorder()
{
  for (x = 0; 16 > x; x++)  // create screen border
  {
    for (y = 0; 8 > y; y++)
    {
      if (x == 0 || y == 0 || x == 16-1 || y == 8-1 )
      {
        screen[x][y] = 1;
      }
    }
  }
}

void manageLevels() /// Create door exits
{
  x = (playerX+3)/8;
  y = (playerY+3)/8;
  if (level == 1)
  {
    if (x == 15 && y == 6) // door 1
    {
      newLevel = 2;
      playerX = 10; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 2)
  {
    if (x == 0 && y == 6) // door 1
    {
      newLevel = 1;
      playerX = 114; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 3) // door 2
    {
      newLevel = 3;
      playerX = 10; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 3)
  {
    if (x == 0 && y == 3) // door 1
    {
      newLevel = 2;
      playerX = 114; // new x or Y cords
      flipLevel();
    }
    if (x == 14 && y == 7) // door 2
    {
      newLevel = 4;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 4)
  {
    if (x == 14 && y == 0) // door 1
    {
      newLevel = 3;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
    if (x == 0 && y == 2) // door 2
    {
      newLevel = 5;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 1 && y == 7) // door 3
    {
      newLevel = 6;
      playerY = 10; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 6) // door 4
    {
      newLevel = 12;
      playerX = 10; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 5)
  {
    if (x == 0 && y == 2) // door 1
    {
      newLevel = 16;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 2) // door 2
    {
      newLevel = 4;
      playerX = 10; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 6)
  {
    if (x == 1 && y == 0) // door 1
    {
      newLevel = 4;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 5) // door 2
    {
      newLevel = 7;
      playerX = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 7)
  {
    if (x == 0 && y == 5) // door 1
    {
      newLevel = 6;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 1) // door 2
    {
      newLevel = 8;
      playerX = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 8)
  {
    if (x == 0 && y == 1) // door 1
    {
      newLevel = 7;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 15 && y == 6) // door 2
    {
      newLevel = 9;
      playerX = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 9)
  {
    if (x == 0 && y == 6) // door 1
    {
      newLevel = 8;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 11 && y == 7) // door 2
    {
      newLevel = 10;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 10)
  {
    if (x == 12 && y == 0) // door 1
    {
      newLevel = 9;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
    if (x == 2 && y == 7) // door 2
    {
      newLevel = 11;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 11)
  {
    if (x == 2 && y == 0) // door 1
    {
      newLevel = 10;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
    if (x == 13 && y == 6) // funace 1
    {
      if (furnaceLit1 == 0)
      {
        if (s == 1)
        {
          sound.tones(fireTune);
        }  
        furnaceLit1 = 1;
      }
    }    
  }

  if (level == 12)
  {
    if (x == 0 && y == 6) // door 1
    {
      newLevel = 4;
      playerX = 115; // new x or Y cords
      flipLevel();
    }
    if (x == 14 && y == 0) // door 2
    {
      newLevel = 13;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 13)
  {
    if (x == 14 && y == 7) // door 1
    {
      newLevel = 12;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
    if (x == 7 && y == 0) // door 2
    {
      newLevel = 14;
      playerY = 45; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 14)
  {
    if (x == 7 && y == 7) // door 1
    {
      newLevel = 13;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
    if (x == 2 && y == 6) // furnce 2
    {
      if (furnaceLit2 == 0)
      {
        if (s == 1)
        {
          sound.tones(fireTune);
        }  
        furnaceLit2 = 1;
      }
    }
  }

  if (level == 16)
  {
    if (x == 15 && y == 2) // door 1
    {
      newLevel = 5;
      playerX = 11; // new x or Y cords
      flipLevel();
    }
    if (x == 9 && y == 7) // door 2
    {
      newLevel = 17;
      playerY = 11; // new x or Y cords
      flipLevel();
    }
  }

  if (level == 17)
  {
    if (x == 9 && y == 0) // door 1
    {
      newLevel = 16;
      playerY = 45; // new x or Y cords
      flipLevel();
    }

    if (x == 2 && y == 6) // furnce 2
    {
      if (furnaceLit3 == 0)
      {
        if (s == 1)
        {
          sound.tones(fireTune);
        }  
        furnaceLit3 = 1;
      }
    }
  }
}////////////////////////////////////////

void flipLevel()
{            
  resetLevel();

  for (i = 0; i > cinderNumber; i ++)
  {
    cinderX[i] = -20;
  }

  if (s == 1)
  {
    sound.tones(doorTune);
  }  

  if (newLevel == 1)
  {
    levelOne();
  }
  if (newLevel == 2)
  {
    levelTwo();
  }
  if (newLevel == 3)
  {
    levelThree();
  }
  if (newLevel == 4)
  {
    levelFour();
  }
  if (newLevel == 5)
  {
    levelFive();
  }
  if (newLevel == 6)
  {
    levelSix();
  }
  if (newLevel == 7)
  {
    levelSeven();
  }
  if (newLevel == 8)
  {
    levelEaight();
  }
  if (newLevel == 9)
  {
  levelNine();
  }
  if (newLevel == 10)
  {
  levelTen();
  }
  if (newLevel == 11)
  {
  levelEleven();
  }
  if (newLevel == 12)
  {
  levelTwelve();
  }
  if (newLevel == 13)
  {
  levelThirteen();
  }
  if (newLevel == 14)
  {
  levelFourteen();
  }
  if (newLevel == 16)
  {
  levelSixteen();
  }
  if (newLevel == 17)
  {
  levelSeventeen();
  }
}

void refreshLevel()
{
  resetLevel();

  if (level == 1)
  {
    playerX = 27; // respawn cords
    playerY = 27;
    levelOne();
  }

  if (level == 2)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelTwo();
  }

  if (level == 3)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelThree();
  }

  if (level == 4)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelFour();
  }

  if (level == 5)
  {
    playerX = 114; // respawn cords
    playerY = 11;
    levelFive();
  }

  if (level == 6)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelSix();
  }

  if (level == 7)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelSeven();
  }

  if (level == 8)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelEaight();
  }

  if (level == 9)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelNine();
  }

  if (level == 10)
  {
    playerX = 97; // respawn cords
    playerY = 11;
    levelTen();
  }

  if (level == 11)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelEleven();
  }

  if (level == 12)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelTwelve();
  }
  if (level == 13)
  {
    playerX = 11; // respawn cords
    playerY = 11;
    levelThirteen();
  }
  if (level == 14)
  {
    playerX = 114; // respawn cords
    playerY = 11;
    levelFourteen();
  }
  if (level == 16)
  {
    playerX = 115; // respawn cords
    playerY = 11;
    levelSixteen();
  }
  if (level == 17)
  {
    playerX = 100; // respawn cords
    playerY = 11;
    levelSeventeen();
  }
}

// LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL

void resetLevel()
{
  for (x = 0; 16 > x; x++)  // erase level
  {
    for (y = 0; 8 > y; y++)
    {
      screen[x][y] = 0;
    }
  }

  for (i = 0; dripNumber > i; i++)
  {
    dripLife[i] = 0;
  }

  for (i = 0; i > cinderNumber; i ++)
  {
    cinderLife[i] = 0;
  }
  levelDelay = 20;

  levelRead = 0;
  playerXvel = 0;
  playerYvel = 0;
}

void gameUnfold()
{
  if (winDelay == 0)
  {
    if (furnaceLit1 == 1 && furnaceLit2 == 1 && furnaceLit3 == 1)
    {
      winDelay = 200;
    }
  }

  if (winDelay > 0)
  {
    winDelay--;
    if (winDelay == 1)
    {
      winGame();
    }
  }

  if (touchdown > 0)
  {
    cameraShake();
    touchdown--;

    if (touchdown == 0)
    {
      xOffset = 0;
      yOffset = 0;
    }
  }

  manageLevels();
  friction();
  getInput();
  flameSpawn();
  movePlayer();
  flameMove();
  cinderMove();
  dripMove();
}

void cameraShake()
{
      r = rand() % 4 + 1;
      if (r == 1)
      {
        xOffset = xOffset + 1;
      }
      if (r == 2)
      {
        xOffset = xOffset - 1;
      }
      if (r == 3)
      {
        yOffset = yOffset + 1;
      }
      if (r == 4)
      {
        yOffset = yOffset - 1;
      }
}

void friction()
{
  if (direction == 1)
  {
    if (moveRight < 6)
    {
      playerXvel = 1;
    }

    if (moveRight == 0)
    {
      playerXvel = 0;
    }
  }

  if (direction == 2)
  {
    if (moveLeft < 6)
    {
      playerXvel = -1;
    }

    if (moveLeft == 0)
    {
      playerXvel = 0;
    }
  }
}

void movePlayer() // MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
{
  if (playerJump == 0)
  {
    if (screen[((playerX+1)/8)][((playerY+yHeight)/8)] == 0
    && screen[((playerX+3)/8)][((playerY+yHeight)/8)] == 0) // detect air below player
    {  // detect air below player and fall if not jumping
      if (headBump ==1)
      {
        playerYvel = playerYvel + gravity;
      }
      else
      {
        playerYvel = playerYvel + gravity; // apply gravity
      }
      fall++;
    }

    if (screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 0
    && screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 9) // detect ground below player
    {
      headBump = 0;
      playerYvel = 0; // stop fall

      if (touchdown == 0 && land == 0)
      {
        touchdown = 5;
        if (s == 1)
        {
          sound.tones(landTune);
        }  
      }
      fall = 0;
      land = 1;
    }

      if (screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 0 &&
      screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 6 ||
      screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 7 ||
      screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 8)
      {
        cinderSpawn();
      }

    // burn wood from the top // 6, 7, 8
    if (anim33 == 11)
    {
      if (screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 0
      && screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 6)
      {
        screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] = 7;
      }
    }
    if (anim33 == 22)
    {
      if (screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 0
      && screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 7)
      {
        screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] = 8;      
      }
    }
    if (anim33 == 33)
    {  
      if (screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] != 0
      && screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] == 8)
      {
        screen[((playerX+3)/8)][((playerY+yHeight+1)/8)] = 0;         
      }
    }

    if (screen[((playerX+3)/8)][((playerY+2)/8)] == 9) // detect WATER below player
    {
      playerSnuff();
    }
  }
  else /// if jumping
  {
    if (screen[((playerX+1)/8)][((playerY+yHeight)/8)] == 0
    && screen[((playerX+3)/8)][((playerY+yHeight)/8)] == 0) // detect air below player
    {
      if (headBump ==1)
      {
        playerYvel = playerYvel + gravity;
        land = 0;
      }
      else
      {
        playerYvel = playerYvel + gravity; // apply gravity
        land = 0;
      }
    }
  }

  if (headBump == 0 && screen[((playerX+3)/8)][((playerY)/8)] != 0) // detect wall above player
  {
    headBump = 1;  // Bump Head
    playerYvel = 0;
  }  


  if (direction == 1 && screen[((playerX+5)/8)][((playerY+2)/8)] != 0
                     && screen[((playerX+5)/8)][((playerY+5)/8)] != 0) // detect right
  {
      playerXvel = 0; // stop run
      moveRight = 0;
      rightWall = 1;
      if (touchdown == 0 && land == 0)
      {
        touchdown = 3;
        if (s == 1)
        {
          sound.tones(landTune);
        }  
      }
      land = 1;
      wallBurnRight();
  }

  if (direction == 2 && screen[((playerX)/8)][((playerY+2)/8)] != 0
                     && screen[((playerX)/8)][((playerY+5)/8)] != 0) // detect left
  {
      playerXvel = 0; // stop run
      moveLeft = 0;
      leftWall = 1;
      if (touchdown == 0 && land == 0)
      {
        touchdown = 3;
        if (s == 1)
        {
          sound.tones(landTune);
        }  
      }
      land = 1;
      wallBurnLeft();
  }

  if (screen[((playerX)/8)][((playerY+2)/8)] == 0
  && screen[((playerX+5)/8)][((playerY+2)/8)] == 0)
  {
    rightWall = 0;
    leftWall = 0;
  }

  if (playerX < 0) // limit player to screen to avoid escaping glitch
  {
    playerX = 9;
    playerXvel = 1;
  }
  if (playerX > 122)
  {
    playerX = 114;
    playerXvel = -1;
  }
  if (playerY < 0)
  {
    playerY = 9;
    playerYvel = 1;
    //headBump = 1;
  }
  if (playerY > 55)
  {
    playerY = 50;
    playerYvel = -1;
  }

  if (rightWall == 1 || leftWall == 1) // wall grab
  {
    if (playerJump == 0)
    {
      playerYvel = 0;
      //playerXvel = 0;
    }
  }

  playerX = playerX + playerXvel;
  playerY = playerY + playerYvel;

  if (screen[(playerX+3)/8][(playerY+5)/8] != 0) // get out of rock
  {
    playerY = playerY - 1;
  }
} // MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM

void wallBurnRight()
{
  if (anim33 == 11)
  {
    if (screen[((playerX+5)/8)][((playerY+3)/8)] == 6)
    {
      screen[((playerX+5)/8)][((playerY+3)/8)] = 7;
    }
  }
  if (anim33 == 22)
  {
    if (screen[((playerX+5)/8)][((playerY+3)/8)] == 7)
    {
      screen[((playerX+5)/8)][((playerY+3)/8)] = 8;
    }
  }
  if (anim33 == 33)
  {
    if (screen[((playerX+5)/8)][((playerY+3)/8)] == 8)
    {
      screen[((playerX+5)/8)][((playerY+3)/8)] = 0;
    }
  }
}

void wallBurnLeft()
{
  if (anim33 == 11)
  {
    if (screen[((playerX)/8)][((playerY+3)/8)] == 6)
    {
      screen[((playerX)/8)][((playerY+3)/8)] = 7;
    }
  }
  if (anim33 == 22)
  {
    if (screen[((playerX)/8)][((playerY+3)/8)] == 7)
    {
      screen[((playerX)/8)][((playerY+3)/8)] = 8;
    }
  }
  if (anim33 == 33)
  {
    if (screen[((playerX)/8)][((playerY+3)/8)] == 8)
    {
      screen[((playerX)/8)][((playerY+3)/8)] = 0;
    }
  }
}

// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII

void getInput()
{
    if (arduboy.pressed(RIGHT_BUTTON))
    {
      direction = 1;
      if (playerXvel < 1)
      {
        playerXvel = playerXvel + 1;
      }
      if (moveRight < 4)
      {
        moveRight = 4;
      }
      moveLeft = 0;
    }

    if (arduboy.pressed(LEFT_BUTTON))
    {
      direction = 2;
      if (playerXvel > -1)
      {
        playerXvel = playerXvel - 1;
      }
      if (moveLeft < 4)
      {
        moveLeft = 4;
      }
      moveRight = 0;
    }

    if (arduboy.pressed(B_BUTTON) && playerDash == 0 && dashPressed == 0) // DASH
    {
      cinderSpawn();
      if (s == 1)
      {
        sound.tones(dashTune);
      }  
      if (direction == 1)
      {
        playerXvel = 3;
        playerDash = 10; // delay untill next dash       
        dashPressed = 1;
        moveRight = 16; // length of dash
        moveLeft = 0;
      }
      if (direction == 2)
      {
        playerXvel = -3;
        playerDash = 10;
        dashPressed = 1;
        moveLeft = 16;
        moveRight = 0;
      }
    }
    if (arduboy.notPressed(B_BUTTON))
    {
      dashPressed = 0;
    }    

    // jump button
    if (rightWall == 1 || leftWall == 1) // wall jump
    {
      if (arduboy.pressed(A_BUTTON) && jumpPressed ==0)
      {
        cinderSpawn();
        if (s == 1)
        {
          sound.tones(jumpTune);
        }  
        playerJump = 10;
        jumpPressed = 1;

        if (rightWall == 1)
        {
          playerXvel = - 1;
          playerYvel = - 3;
          playerX--;
          moveRight = 20;
        }
        if (leftWall == 1)
        {
          playerXvel = 1;
          playerYvel = - 3;
          playerX++;
          moveLeft = 20;
        }
      }
    }


    if (rightWall == 0 && leftWall == 0) // normal jump
    {
      if (jumpPressed == 0 && arduboy.pressed(A_BUTTON) && (screen[((playerX+2)/8)][((playerY+yHeight+2)/8)] != 0) && (screen[((playerX+2)/8)][((playerY)/8)] == 0))// detect ground
      { // jump from platform
        cinderSpawn();
        if (s == 1)
        {
          sound.tones(jumpTune);
        }  
        playerJump = 18;
        playerYvel = -4;
        jumpPressed = 1;
      }
    }

  if (arduboy.notPressed(A_BUTTON))
  {
    jumpPressed = 0;
  }
}

// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII

void draw()
{
  drawLevel();
  dripDraw();
  objectsDraw();
  drawMask();
  furnaceDraw();
  drawPlayer();
  flameDraw();
  cinderDraw();

  // debug text
  //arduboy.setCursor(0,0);
  //arduboy.print(touchdown);
  //arduboy.setCursor(60,0);
  //arduboy.print(land);
  
  arduboy.display();
}

void objectsDraw()
{
  if (level == 1)
  {
      if (24 > playerX-31
      && 24 < playerX+31
      && 32 > playerY-31
      && 32 < playerY+10)
    Sprites::drawOverwrite(24+xOffset, 32+yOffset, candle, 0);
  }
  if (level == 11)
  {
    if (100 > playerX-25
    && 100 < playerX+25
    && 32 > playerY-31
    && 32 < playerY+22)
    Sprites::drawOverwrite(100+xOffset, 40+yOffset, furnace1, 0);
  }
  if (level == 14)
  {
    if (16 > playerX-25
    && 16 < playerX+25
    && 32 > playerY-31
    && 32 < playerY+22)
    Sprites::drawOverwrite(16+xOffset, 40+yOffset, furnace1, 0);
  }

  if (level == 17)
  {
    if (16 > playerX-25
    && 16 < playerX+25
    && 32 > playerY-31
    && 32 < playerY+22)
    Sprites::drawOverwrite(16+xOffset, 40+yOffset, furnace1, 0);
  }
}

void furnaceDraw()
{
  if (level == 11)
  {
    if (furnaceLit1 == 1)
    {
      if (anim4 == 1)
      {
        Sprites::drawOverwrite(100+xOffset, 48+yOffset, fFlame1, 0);
      }
      if (anim4 == 2)
      {
        Sprites::drawOverwrite(100+xOffset, 48+yOffset, fFlame2, 0);
      }
      if (anim4 == 3)
      {
        Sprites::drawOverwrite(100+xOffset, 48+yOffset, fFlame3, 0);
      }
      if (anim4 == 4)
      {
        Sprites::drawOverwrite(100+xOffset, 48+yOffset, fFlame4, 0);
      }
    }
  }
  if (level == 14)
  {
    if (furnaceLit2 == 1)
    {
      furnaceLit();
    }
  }
  if (level == 17)
  {
    if (furnaceLit3 == 1)
    {
      furnaceLit();
    }
  }
}

void furnaceLit()
{
      if (anim4 == 1)
      {
        Sprites::drawOverwrite(16+xOffset, 48+yOffset, fFlame1, 0);
      }
      if (anim4 == 2)
      {
        Sprites::drawOverwrite(16+xOffset, 48+yOffset, fFlame2, 0);
      }
      if (anim4 == 3)
      {
        Sprites::drawOverwrite(16+xOffset, 48+yOffset, fFlame3, 0);
      }
      if (anim4 == 4)
      {
        Sprites::drawOverwrite(16+xOffset, 48+yOffset, fFlame4, 0);
      }
}

void drawMask()
{
  if (anim4 == 1)
  {
    Sprites::drawExternalMask((playerX+xOffset)-30, (playerY+yOffset)-31, mask0mask, light1, 0,  0); // MASK
  }
  if (anim4 == 2)
  {
    Sprites::drawExternalMask((playerX+xOffset)-30, (playerY+yOffset)-31, mask0mask, light2, 0,  0); // MASK
  }
  if (anim4 == 3)
  {
    Sprites::drawExternalMask((playerX+xOffset)-30, (playerY+yOffset)-31, mask0mask, light3, 0,  0); // MASK
  }
  if (anim4 == 4)
  {
    Sprites::drawExternalMask((playerX+xOffset)-30, (playerY+yOffset)-31, mask0mask, light2, 0,  0); // MASK
  }
}

void drawPlayer()
{
  Sprites::drawExternalMask(playerX+xOffset, (playerY+yOffset)+1, player0, player0mask, 0,  0);
}

void drawLevel()
{
  playerXsimp = (playerX+6)/8;
  playerYsimp = (playerY+8)/8;
  windowXmin = playerXsimp - 3;
  windowXmax = playerXsimp + 3;
  windowYmin = playerYsimp - 3;
  windowYmax = playerYsimp + 3;
  if (windowXmin < 0)
  {
    windowXmin = 0;
  }
  if (windowXmax > 16)
  {
    windowXmax = 16;
  }

  if (windowYmin < 0)
  {
    windowYmin = 0;
  }
  if (windowYmax > 8)
  {
    windowYmax = 8;
  }

  for (x = windowXmin; windowXmax > x; x++)
  {
    for (y = windowYmin; windowYmax > y; y++)
    {
      if (screen[x][y] == 1)
      {
        //arduboy.fillRect((x*8)+xOffset,(y*8)+yOffset,8,8,1);
        if (blockType == 2)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, block2, blockMask, 0,  0);
        }
        if (blockType == 3)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, block3, blockMask, 0,  0);
        }
        if (blockType == 4)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, block4, blockMask, 0,  0);
        }
        if (blockType == 5)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, block5, blockMask, 0,  0);
        }
      }

      if (screen[x][y] == 6)
      {
        Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, wood1, blockMask, 0,  0);
      }
      if (screen[x][y] == 7)
      {
        Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, wood2, blockMask, 0,  0);
      }
      if (screen[x][y] == 8)
      {
        Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, wood3, blockMask, 0,  0);
      }

      if (screen[x][y] == 9)
      { 
        if (anim6 == 1)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water1, blockMask, 0,  0);
        }
        if (anim6 == 2)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water2, blockMask, 0,  0);          
        }
        if (anim6 == 3)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water3, blockMask, 0,  0);          
        }
        if (anim6 == 4)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water4, blockMask, 0,  0);
        }
        if (anim6 == 5)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water5, blockMask, 0,  0);          
        }
        if (anim6 == 6)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, water6, blockMask, 0,  0);          
        }
      }
        if (screen[x][y] == 10)
        {
          Sprites::drawExternalMask((x*8)+xOffset, (y*8)+yOffset, tap1, tap1mask, 0,  0);
        }
    }
  }

  for (x = 0; 16 > x; x++) // draw all screen
  {
    for (y = 0; 8 > y; y++)
   {
    if (anim33 == 15)
    {
      if (screen[x][y] == 10)
      {
        dripSpawn();
      }
    }
  //    if (screen[x][y] == 1)
  //    {
  //      arduboy.fillRect((x*8)+xOffset,(y*8)+yOffset,8,8,1);
  //    }
    }
  }
}

void dripSpawn()
{
  for (i = 0; dripNumber > i; i++)
  {
    if (dripLife[i] == 0)
    {
      r = rand() % 10;
      if (r == 0)
      {
        dripX[i] = x*8;
        dripY[i] = y*8;
        dripLife[i] = 50;
      }
    }
  }
}
void dripMove()
{
  for (i = 0; dripNumber > i; i++)
  {
    if (dripLife[i] > 0)
    {
      dripY[i] = dripY[i] + 1;
      Rect playerCol(playerX, playerY, 5, 5);
      Rect dripCol(dripX[i],dripY[i], 7, 8);
      if (arduboy.collide(playerCol, dripCol))
      {
        playerSnuff();
      }
      dripLife[i]--;
    }
  }
}
void dripDraw()
{
  for (i = 0; dripNumber > i; i++)
  {
    if (dripLife[i] > 0)
    {
      if (dripX[i] > playerX-31
      && dripX[i] < playerX+31
      && dripY[i] > playerY-31
      && dripY[i] < playerY+22)
      {
        if (anim6 < 4)
        {
          Sprites::drawExternalMask(dripX[i], dripY[i], drip1, drip1mask, 0,  0);
        }
        if (anim6 >3)
        {
          Sprites::drawExternalMask(dripX[i], dripY[i], drip2, drip2mask, 0,  0);
        }
      }
    }  
  }
}

////////////////////////

void cinderSpawn()
{
  for (i = 0; cinderNumber > i; i++)
  {
    if (cinderLife[i] == 0)
    {
      r = rand() % 2;
      if (r == 0)
      {
        cinderX[i] = (playerX+1) + rand() % 5 - 2;
        cinderY[i] = (playerY+5) + rand() % 5 - 2;
        cinderLife[i] = 10;
      }
    }
  }
}
void cinderMove()
{
if (anim3 == 2)
{
  for (i = 0; cinderNumber > i; i++)
  {
    if (cinderLife[i] > 0)
    {
      r = rand() % 4 + 1;
      if (r == 1)
      {
        cinderX[i] = cinderX[i] + 1;
      }
      if (r == 2)
      {
        cinderX[i] = cinderX[i] - 1;
      }
      if (r == 3)
      {
        cinderY[i] = cinderY[i] + 1;
      }
      if (r == 4)
      {
        cinderY[i] = cinderY[i] - 1;
      }

      //cinderY[i] = cinderY[i] - 1; // drift up
      cinderLife[i]--;
    }
  }
}
}
void cinderDraw()
{
  for (i = 0; cinderNumber > i; i++)
  {
    if (cinderLife[i] > 0 && levelDelay == 0)
    {
      arduboy.drawPixel(cinderX[i]+xOffset, cinderY[i]+yOffset,1);
    }  
  }
}

void flameSpawn()
{
  for (i = 0; flameNumber > i; i++)
  {
    if (flameLife[i] == 0)
    {
      r = rand() % 2;
      if (r == 0)
      {
        flameX[i] = (playerX+1) + rand() % 5 - 2;
        flameY[i] = (playerY+2) + rand() % 5 - 2;
        flameLife[i] = 20;
      }
    }
  }
}
void flameMove()
{
  for (i = 0; flameNumber > i; i++)
  {
    if (flameLife[i] > 0)
    {

      if (flameX[i] < playerX - 50)
      {
        flameX[i] = (playerX+1) + rand() % 5 - 2;        
      }
      if (flameX[i] > playerX + 50)
      {
        flameX[i] = (playerX+1) + rand() % 5 - 2;        
      }

      if (flameY[i] < playerY - 25)
      {
        flameY[i] = (playerY) + rand() % 5 - 2;        
      }
      if (flameY[i] > playerY + 25)
      {
        flameY[i] = (playerY) + rand() % 5 - 2;        
      }

      flameY[i] = flameY[i] - 0.2;
      flameLife[i]--;
    }
  }
}
void flameDraw()
{
  for (i = 0; flameNumber > i; i++)
  {
    if (flameLife[i] > 0)
    {
      if (flameLife[i] > 15)
      {
        Sprites::drawExternalMask(flameX[i]+xOffset, flameY[i]+xOffset, flame2, flame2mask, 0,  0);
      }
      if (flameLife[i] > 4 && flameLife[i] < 15)
      {
        Sprites::drawExternalMask(flameX[i]+xOffset, flameY[i]+yOffset, flame1, flame1mask, 0,  0);
      }
      if (flameLife[i] < 5)
      {
        arduboy.drawPixel(flameX[i]+xOffset, flameY[i]+yOffset,1);
      }
    }  
  }
}

void playerSnuff()
{
  if (s == 1)
  {
    sound.tones(snuffTune);
  }
  arduboy.clear();
  arduboy.display();
  arduboy.delayShort(1000);
  refreshLevel();
  for (i = 0; dripNumber > i; i++)
  {
    dripX[i] = -20;
  }
  for (i = 0; i > flameNumber; i ++)
  {
    flameLife[i] = 0;
  }
  for (i = 0; i > cinderNumber; i ++)
  {
    cinderX[i] = -20;
  }
  lives--;
  livesScreen();
  if (lives == 0)
  {
    gameOver();
  }
  playerXvel = 0;
  playerYvel = 0;
}

void livesScreen()
{
  if (lives > 0)
  {
    arduboy.clear();

    //Sprites::drawExternalMask(0, 31, player0, life1, 0,  0);
    Sprites::drawOverwrite(0, 31, life1, 0);

    if (lives > 1)
    {
    //  Sprites::drawExternalMask(55, 31, player0, life1, 0,  0);
      Sprites::drawOverwrite(55, 31, life1, 0);
    }
    if (lives > 2)
    {
    //  Sprites::drawExternalMask(110, 31, player0, life1, 0,  0);
      Sprites::drawOverwrite(110, 31, life1, 0);
    }

    arduboy.display();
    arduboy.delayShort(1000);
    arduboy.clear();
    arduboy.display();
  }
}

void gameOver()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, gameOverScreen, 0);
  arduboy.display();
  arduboy.delayShort(2000);
  resetVariables();
}

void winGame()
{
  arduboy.clear();
  Sprites::drawOverwrite(0, 0, win1, 0);
  arduboy.display();
  arduboy.delayShort(3000);
  resetVariables();
}

void resetVariables()
{
start = 0;
direction = 1;
gameProgress = 0;
levelRead = 0;

// player Variables
playerX = 0; // respawn cords
playerY = 0;
playerXvel = 0; // velocity
playerYvel = 0;
playerJump = 0;
playerDash = 0;
jumpPressed = 0;
dashPressed = 0;
playerDeath = 0;
headBump = 0;
leftWall = 0;
rightWall = 0;
fall = 0;
moveRight = 0;
moveLeft = 0;
yHeight = 5;
lives = 3;
furnaceLit1 = 0;
furnaceLit2 = 0;
furnaceLit3 = 0;
winDelay = 0;

// Screen Variables
xOffset = 0;
yOffset = 0;
}